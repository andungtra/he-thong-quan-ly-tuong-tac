// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.hcmus.tis.controller;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.hcmus.tis.controller.ProjectProcessController;
import org.hcmus.tis.model.ProjectProcess;
import org.hcmus.tis.model.WorkItemType;
import org.hcmus.tis.repository.WorkItemTypeRepository;
import org.hcmus.tis.service.ProjectProcessService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ProjectProcessController_Roo_Controller {
    
    @Autowired
    ProjectProcessService ProjectProcessController.projectProcessService;
    @Autowired
    WorkItemTypeRepository ProjectProcessController.workItemTypeRepository;
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ProjectProcessController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ProjectProcess());
        return "projectprocesses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ProjectProcessController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("projectprocess", projectProcessService.findProjectProcess(id));
        uiModel.addAttribute("itemId", id);
        return "projectprocesses/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ProjectProcessController.update(@Valid ProjectProcess projectProcess, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, projectProcess);
            return "projectprocesses/update";
        }
        uiModel.asMap().clear();
        projectProcessService.updateProjectProcess(projectProcess);
        return "redirect:/projectprocesses/" + encodeUrlPathSegment(projectProcess.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ProjectProcessController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, projectProcessService.findProjectProcess(id));
        return "projectprocesses/update";
    }
    
    void ProjectProcessController.populateEditForm(Model uiModel, ProjectProcess projectProcess) {
        uiModel.addAttribute("projectProcess", projectProcess);
        uiModel.addAttribute("workitemtypes", workItemTypeRepository.findAll());
    }
    
    String ProjectProcessController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}

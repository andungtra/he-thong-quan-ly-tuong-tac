// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.hcmus.tis.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.hcmus.tis.model.WorkItemContainer;
import org.springframework.transaction.annotation.Transactional;

privileged aspect WorkItemContainer_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager WorkItemContainer.entityManager;
    
    public static final EntityManager WorkItemContainer.entityManager() {
        EntityManager em = new WorkItemContainer() {
        }.entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long WorkItemContainer.countWorkItemContainers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM WorkItemContainer o", Long.class).getSingleResult();
    }
    
    public static List<WorkItemContainer> WorkItemContainer.findAllWorkItemContainers() {
        return entityManager().createQuery("SELECT o FROM WorkItemContainer o", WorkItemContainer.class).getResultList();
    }
    
    public static WorkItemContainer WorkItemContainer.findWorkItemContainer(Long id) {
        if (id == null) return null;
        return entityManager().find(WorkItemContainer.class, id);
    }
    
    public static List<WorkItemContainer> WorkItemContainer.findWorkItemContainerEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM WorkItemContainer o", WorkItemContainer.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void WorkItemContainer.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void WorkItemContainer.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            WorkItemContainer attached = WorkItemContainer.findWorkItemContainer(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void WorkItemContainer.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void WorkItemContainer.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public WorkItemContainer WorkItemContainer.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        WorkItemContainer merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}

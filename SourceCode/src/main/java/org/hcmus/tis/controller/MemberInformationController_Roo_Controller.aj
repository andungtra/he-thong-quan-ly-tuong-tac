// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.hcmus.tis.controller;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import org.hcmus.tis.controller.MemberInformationController;
import org.hcmus.tis.model.MemberInformation;
import org.hcmus.tis.model.MemberRole;
import org.hcmus.tis.model.Project;
import org.hcmus.tis.service.AccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MemberInformationController_Roo_Controller {
    
    @Autowired
    AccountService MemberInformationController.accountService;
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MemberInformationController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("memberinformation", MemberInformation.findMemberInformation(id));
        uiModel.addAttribute("itemId", id);
        return "memberinformations/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MemberInformationController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("memberinformations", MemberInformation.findMemberInformationEntries(firstResult, sizeNo));
            float nrOfPages = (float) MemberInformation.countMemberInformations() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("memberinformations", MemberInformation.findAllMemberInformations());
        }
        return "memberinformations/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MemberInformationController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, MemberInformation.findMemberInformation(id));
        return "memberinformations/update";
    }
    
    void MemberInformationController.populateEditForm(Model uiModel, MemberInformation memberInformation) {
        uiModel.addAttribute("memberInformation", memberInformation);
        uiModel.addAttribute("accounts", accountService.findAllAccounts());
        uiModel.addAttribute("memberroles", MemberRole.findAllMemberRoles());
        uiModel.addAttribute("projects", Project.findAllProjects());
    }
    
    String MemberInformationController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
